#version 400 core

layout(triangles, equal_spacing, cw) in;

uniform mat4 P;
uniform mat4 T;
uniform mat4 M;

in vec3 tcVertex[];
in vec3 tcPosition[];
in vec3 tcColor[];
in float tcRadius[];

smooth out vec3 teNormal;
out vec3 teColor;

vec3 mixV(vec3 coords, vec3 v1, vec3 v2, vec3 v3){
    vec3 p1 = coords.x * v1;
    vec3 p2 = coords.y * v2;
    vec3 p3 = coords.z * v3;

    return (p1 + p2 + p3);
}

void main()
{
    vec3 coords = gl_TessCoord.xyz;

    vec3 teVertex = normalize(mixV(coords, tcVertex[0], tcVertex[1], tcVertex[2]));
    gl_Position = P * T * M * vec4(tcPosition[0] + teVertex*tcRadius[0], 1);

    teNormal = (T * vec4(teVertex,1.0)).xyz;

    teColor = mixV(coords, tcColor[0], tcColor[1], tcColor[2]);
}
