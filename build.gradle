plugins {
    id 'java'
    id 'application'
    id 'eclipse'
    id 'idea'
    id 'org.openjfx.javafxplugin'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.11
targetCompatibility = 1.11
version = '0.2'
def mainClass = 'org.structureviewer.StructureViewerFX'
mainClassName = "org.structureviewer/$mainClass"

javafx {
    version = "13"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Simulation of Bragg X-ray diffraction in crystalline structures',
                   'Implementation-Version': project.version,
//                   'Class-Path': configurations.runtime.collect { it.getName() }.join(' '),
                   'Main-Class': mainClass
    }
}

sourceSets {
    main {
        resources {
            exclude '**/*.pxml'
        }
    }
}

distributions {
    main {
        contents {
            from("$projectDir/tables") {
                into "tables"
                include '*.csv'
            }
        }
    }
}

project(':') {
    dependencies {
        compileOnly 'org.jetbrains:annotations:17.0.0'

        implementation project(path:':calculator', configuration:'jarFile')
        implementation project(':fx-validation')
        implementation files('fx-validation/libs/aeFXActions-0.2.0.jar')
        implementation 'org.scala-lang:scala-library:2.13.1'

        implementation 'org.jogamp.gluegen:gluegen-rt-main:2.3.2'
        implementation 'org.jogamp.jogl:jogl-all-main:2.3.2'
        implementation 'net.sourceforge.jmol:jmol:14.29.27'
    }
}

//tasks.withType(JavaCompile) {
//    doFirst {
//        println "Args for $name are $options.allCompilerArgs"
//    }
//}

task prepareBundles(type: Copy) {
    def destination = "$buildDir/generated/resources"
    group = 'Build Setup'
    description = 'Converts bundles from xml format into conventional'
    from 'src/main/resources' include '**/*.pxml'
    into destination
    rename {String filename -> filename.replace('pxml', 'properties')}
    eachFile {FileCopyDetails details ->
        println "Processing file : ${details.getFile()}"
        File src = details.getFile()
        File dst = file(java.nio.file.Paths.get(destination, details.getPath()))
        println "Destination file : $dst"
        def dir = dst.parentFile
        if (null != dir) mkdir(dir)
        def output = new java.io.FileOutputStream(dst)
        def props = new java.util.Properties()
        props.loadFromXML(details.open())
        props.store(output, "Converted from ${src.name}")
        details.exclude()
    }
}

tasks.processResources.from "$buildDir/generated/resources"
tasks.processResources.dependsOn prepareBundles

wrapper {
    gradleVersion = '5.6.3'
}

