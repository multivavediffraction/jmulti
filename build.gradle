plugins {
    id 'java'
    id 'application'
    id 'eclipse'
    id 'idea'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.11
targetCompatibility = 1.11
version = '0.5'
def mainClass = 'org.structureviewer.Main'
mainClassName = mainClass

sourceSets {
    main {
        resources {
            exclude '**/*.pxml'
        }
    }
}

startScripts.onlyIf {false}

distributions {
    main {
        contents {
            from jar {}
            from("$projectDir/tables") {
                into "tables"
                include '*.csv'
            }
            from("$projectDir/javaFX-mac") {
                into 'lib'
            }
            from("$projectDir/src/main/resources/org/structureviewer"){
                include '*.ico'
                rename {String filename -> filename.replace('app_icon', "${project.name}")}
            }
        }
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:17.0.0'

    implementation 'org.openjfx:javafx-base:13.0.1'
    implementation 'org.openjfx:javafx-base:13.0.1:win'
    implementation 'org.openjfx:javafx-base:13.0.1:mac'
    implementation 'org.openjfx:javafx-base:13.0.1:linux'
    implementation 'org.openjfx:javafx-controls:13.0.1'
    implementation 'org.openjfx:javafx-controls:13.0.1:win'
    implementation 'org.openjfx:javafx-controls:13.0.1:mac'
    implementation 'org.openjfx:javafx-controls:13.0.1:linux'
    implementation 'org.openjfx:javafx-graphics:13.0.1'
    implementation 'org.openjfx:javafx-graphics:13.0.1:win'
    implementation 'org.openjfx:javafx-graphics:13.0.1:mac'
    implementation 'org.openjfx:javafx-graphics:13.0.1:linux'
    implementation 'org.openjfx:javafx-fxml:13.0.1'
    implementation 'org.openjfx:javafx-fxml:13.0.1:win'
    implementation 'org.openjfx:javafx-fxml:13.0.1:mac'
    implementation 'org.openjfx:javafx-fxml:13.0.1:linux'

    implementation project(':calculator')
    implementation project(':fx-validation')

    implementation 'net.sourceforge.jmol:jmol:14.29.27'
}

afterEvaluate {
    jar {
        manifest {
            attributes 'Implementation-Title': 'Simulation of Bragg X-ray diffraction in crystalline structures',
                    'Implementation-Version': project.version,
                    'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' '),
                    'Main-Class': mainClassName
        }
    }
}

//tasks.withType(JavaCompile) {
//    doFirst {
//        println "Args for $name are $options.allCompilerArgs"
//    }
//}

task prepareBundles(type: Copy) {
    def destination = "$buildDir/generated/resources"
    group = 'Build Setup'
    description = 'Converts bundles from xml format into conventional'
    from 'src/main/resources' include '**/*.pxml'
    into destination
    rename {String filename -> filename.replace('pxml', 'properties')}
    eachFile {FileCopyDetails details ->
        println "Processing file : ${details.getFile()}"
        File src = details.getFile()
        File dst = file(java.nio.file.Paths.get(destination, details.getPath()))
        println "Destination file : $dst"
        def dir = dst.parentFile
        if (null != dir) mkdir(dir)
        def output = new java.io.FileOutputStream(dst)
        def props = new java.util.Properties()
        props.loadFromXML(details.open())
        props.store(output, "Converted from ${src.name}")
        details.exclude()
    }
}

tasks.processResources.from "$buildDir/generated/resources"
tasks.processResources.dependsOn prepareBundles

wrapper {
    gradleVersion = '5.6.3'
}

